console.log("üöÄ dashboard.js ƒëang ho·∫°t ƒë·ªông");

const form = document.getElementById("createCategoryForm");
const nameInput = document.getElementById("nameInput");
const slugInput = document.getElementById("slugInput");
const categoryList = document.getElementById("categoryList");
const itemsList = document.getElementById("itemsList");

// ‚úÖ H√†m g·ªçi API l·∫•y danh s√°ch item
const loadItemsByCategory = async (category_Id) => {
  console.log("üì• G·ªçi loadItemsByCategory v·ªõi categoryId =", category_Id);

  itemsList.innerHTML = "<li class='list-group-item'>ƒêang t·∫£i...</li>";

  try {
    const res = await fetch(`/items?category_id=${category_Id}`, {
      credentials: "include",
    });
    console.log("üì° K·∫øt qu·∫£ fetch items:", res.status);

    if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i item");

    const data = await res.json();
    console.log("üì¶ D·ªØ li·ªáu item tr·∫£ v·ªÅ:", data);

    if (!Array.isArray(data)) throw new Error("‚ùå D·ªØ li·ªáu kh√¥ng ph·∫£i m·∫£ng");

    if (data.length === 0) {
      itemsList.innerHTML =
        "<li class='list-group-item'>Kh√¥ng c√≥ item n√†o</li>";
      return;
    }

    itemsList.innerHTML = "";
    data.forEach((item) => {
      const li = document.createElement("li");
      li.className = "list-group-item d-flex justify-content-between align-items-center";
      li.innerHTML = `
        <div>
          <strong>${item.title}</strong><br>${item.content || ""}
        </div>
        <div>
        <button class="btn btn-warning btn-sm edit-item-btn mx-1" data-id="${item.id}">S·ª≠a</button>
        <button class="btn btn-danger btn-sm delete-item-btn" data-id="${item.id}">X√≥a</button>
        </div>
        `;
      itemsList.appendChild(li);
    });
    // G·∫Øn s·ª± ki·ªán x√≥a cho t·ª´ng n√∫t s·ª≠a x√≥a c·ªßa item sau khi load danh s√°ch
    attachEditEventForItemButtons(category_Id);
    attachDeleteEventForItemButtons(category_Id);

  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i item:", err);
    itemsList.innerHTML =
      "<li class='list-group-item list-group-item-danger'>Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu</li>";
  }
};

// ‚úÖ H√†m g·ªçi API l·∫•y danh m·ª•c
const loadCategories = async () => {
  console.log("üì• B·∫Øt ƒë·∫ßu loadCategories");

  try {
    const res = await fetch("/categories", { credentials: "include" });
    console.log("üì° K·∫øt qu·∫£ fetch categories:", res.status);

    const data = await res.json();
    console.log("üì¶ D·ªØ li·ªáu categories:", data);

    categoryList.innerHTML = "";

    if (!Array.isArray(data)) throw new Error("‚ùå D·ªØ li·ªáu kh√¥ng ph·∫£i m·∫£ng");

    if (data.length === 0) {
      categoryList.innerHTML =
        "<li class='list-group-item'>Ch∆∞a c√≥ danh m·ª•c n√†o.</li>";
      return;
    }

    data.forEach((cat) => {
      console.log("üìÅ Danh m·ª•c:", cat);
      const li = document.createElement("li");
      li.className =
        "list-group-item d-flex justify-content-between align-items-center";
      li.textContent = `${cat.name} (${cat.slug})`;

      li.addEventListener("click", () => {
        console.log("üñ±Ô∏è Click v√†o danh m·ª•c:", cat);
        loadItemsByCategory(cat.id);
      });
      categoryList.appendChild(li);
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i danh m·ª•c:", err);
  }
};

// ‚úÖ G·ª≠i form t·∫°o danh m·ª•c
form.addEventListener("submit", async (e) => {
  e.preventDefault();

  const name = nameInput.value.trim();
  const slug = slugInput.value.trim();

  console.log("üì® G·ª≠i form t·∫°o danh m·ª•c:", { name, slug });

  if (!name) {
    alert("Vui l√≤ng nh·∫≠p t√™n danh m·ª•c");
    return;
  }

  try {
    const res = await fetch("/categories", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ name, slug }),
    });

    console.log("üßæ K·∫øt qu·∫£ POST t·∫°o danh m·ª•c:", res.status);

    if (!res.ok) {
      const data = await res.json();
      alert("L·ªói: " + (data.message || "Kh√¥ng th·ªÉ t·∫°o danh m·ª•c"));
      return;
    }

    nameInput.value = "";
    slugInput.value = "";

    await loadCategories();
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o danh m·ª•c:", err);
    alert("L·ªói m√°y ch·ªß");
  }
});

// ‚úÖ T·∫£i danh m·ª•c l·∫ßn ƒë·∫ßu
loadCategories();

// T·ª± ƒë·ªông load l·∫°i danh m·ª•c v·ª´a th√™m sau khi reload
const lastCategoryId = localStorage.getItem("lastCategoryId");
if (lastCategoryId) {
  loadItemsByCategory(lastCategoryId);
  localStorage.removeItem("lastCategoryId");
}

console.log("‚úÖ items.js ƒë∆∞·ª£c load");

document.addEventListener("DOMContentLoaded", () => {
  // T·∫°o h√†m to√†n c·ª•c ƒë·ªÉ g·ªçi t·ª´ categories.js
  window.loadItemsByCategory = async (categoryId) => {
    const itemsList = document.getElementById("itemsList");
    itemsList.innerHTML = "<li class='list-group-item'>ƒêang t·∫£i...</li>";

    try {
      const res = await fetch(`/items?category_id=${categoryId}`, {
        credentials: "include",
      });

      if (!res.ok) throw new Error("L·ªói khi t·∫£i item");

      const items = await res.json();

      if (items.length === 0) {
        itemsList.innerHTML =
          "<li class='list-group-item'>Kh√¥ng c√≥ item n√†o</li>";
        return;
      }

      itemsList.innerHTML = ""; // X√≥a loading

      items.forEach((item) => {
        const li = document.createElement("li");
        li.className = "list-group-item";
        li.innerHTML = `<strong>${item.title}</strong><br>${item.content || ""
          }`;
        itemsList.appendChild(li);
      });
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i items:", err);
      itemsList.innerHTML =
        "<li class='list-group-item text-danger'>Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu</li>";
    }
  };
});

// Th√™m s·ª± ki·ªán cho n√∫t Th√™m
const addItemBtn = document.getElementById("addItemBtn");
addItemBtn.addEventListener("click", async () => {
  // L·∫•y danh s√°ch categories t·ª´ API
  let categories = [];
  try {
    const res = await fetch("/categories", { credentials: "include" });
    if (res.ok) {
      categories = await res.json();
    }
  } catch (err) {
    alert("Kh√¥ng th·ªÉ t·∫£i danh m·ª•c");
    return;
  }

  const optionsHtml = categories.map(cat => `<option value="${cat.id}">${cat.name}</option>`).join("");
  const formHtml = `
    <div id="itemModal" style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.3);display:flex;align-items:center;justify-content:center;z-index:9999;">
      <form id="newItemForm" style="background:#fff;padding:20px;border-radius:8px;min-width:300px;">
        <h5>Th√™m Item m·ªõi</h5>
        <select id="itemCategory" class="form-control mb-2" required>
          <option value="">Ch·ªçn danh m·ª•c</option>
          ${optionsHtml}
        </select>
        <input type="text" id="itemTitle" class="form-control mb-2" placeholder="Ti√™u ƒë·ªÅ" required />
        <button type="submit" class="btn btn-primary">L∆∞u</button>
        <button type="button" id="closeModalBtn" class="btn btn-secondary">ƒê√≥ng</button>
      </form>
    </div>
  `;
  document.body.insertAdjacentHTML("beforeend", formHtml);

  document.getElementById("closeModalBtn").onclick = () => {
    document.getElementById("itemModal").remove();
  };

  document.getElementById("newItemForm").onsubmit = async (e) => {
    e.preventDefault();
    const category_Id = document.getElementById("itemCategory").value;
    const title_content = document.getElementById("itemTitle").value.trim();
    if (!category_Id || !title_content) {
      alert("Vui l√≤ng ch·ªçn danh m·ª•c v√† nh·∫≠p ti√™u ƒë·ªÅ");
      return;
    }

    // Ki·ªÉm tra tr√πng l·∫∑p ti√™u ƒë·ªÅ trong danh m·ª•c ƒë√£ ch·ªçn
    try {
      const resCheck = await fetch(`/items?category_id=${category_Id}`, { credentials: "include" });
      if (resCheck.ok) {
        const items = await resCheck.json();
        const isDuplicate = items.some(item => item.title.trim().toLowerCase() === title_content.toLowerCase());
        if (isDuplicate) {
          alert("ƒê√£ t·ªìn t·∫°i");
          return;
        }
      }
    } catch (err) {
      alert("L·ªói ki·ªÉm tra tr√πng l·∫∑p");
      return;
    }

    try {
      const res = await fetch("/items", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ category_id: category_Id, title: title_content }),
      });
      if (!res.ok) {
        alert("L·ªói khi th√™m item");
        return;
      }
      document.getElementById("itemModal").remove();
      localStorage.setItem("lastCategoryId", category_Id);
      window.location.reload();
      const lastCategoryId = localStorage.getItem("lastCategoryId");
    } catch (err) {
      return;
    }
  };
});

// G·∫Øn s·ª± ki·ªán x√≥a cho t·ª´ng n√∫t x√≥a c·ªßa item sau khi load danh s√°ch
function attachDeleteEventForItemButtons(categoryId) {
  document.querySelectorAll(".delete-item-btn").forEach(btn => {
    btn.onclick = async () => {
      const itemId = btn.getAttribute("data-id");
      if (!itemId) return;
      if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a item n√†y?")) return;
      try {
        const res = await fetch(`/items/${itemId}`, {
          method: "DELETE",
          credentials: "include"
        });
        if (!res.ok) {
          alert("L·ªói khi x√≥a item");
          return;
        }
        localStorage.setItem("lastCategoryId", categoryId);
        window.location.reload();
      } catch (err) {
        alert("L·ªói m√°y ch·ªß");
      }
    };
  });
}

function attachEditEventForItemButtons(categoryId) {
  document.querySelectorAll(".edit-item-btn").forEach(btn => {
    btn.onclick = async () => {
      const itemId = btn.getAttribute("data-id");
      if (!itemId) return;

      // L·∫•y th√¥ng tin item hi·ªán t·∫°i
      let itemData = null;
      try {
        const res = await fetch(`/items/${itemId}`, { credentials: "include" });
        if (res.ok) {
          itemData = await res.json();
        }
      } catch (err) {
        alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin item");
        return;
      }
      if (!itemData) {
        alert("Kh√¥ng t√¨m th·∫•y item");
        return;
      }

      // Hi·ªÉn th·ªã modal s·ª≠a
      const formHtml = `
        <div id="editItemModal" style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.3);display:flex;align-items:center;justify-content:center;z-index:9999;">
          <form id="editItemForm" style="background:#fff;padding:20px;border-radius:8px;min-width:300px;">
            <h5>S·ª≠a Item</h5>
            <input type="text" id="editItemTitle" class="form-control mb-2" placeholder="Ti√™u ƒë·ªÅ" value="${itemData.title || ""}" required />
            <textarea id="editItemContent" class="form-control mb-2" placeholder="N·ªôi dung">${itemData.content || ""}</textarea>
            <button type="submit" class="btn btn-primary">L∆∞u</button>
            <button type="button" id="closeEditModalBtn" class="btn btn-secondary">ƒê√≥ng</button>
          </form>
        </div>
      `;
      document.body.insertAdjacentHTML("beforeend", formHtml);

      document.getElementById("closeEditModalBtn").onclick = () => {
        document.getElementById("editItemModal").remove();
      };

      document.getElementById("editItemForm").onsubmit = async (e) => {
        e.preventDefault();
        const newTitle = document.getElementById("editItemTitle").value.trim();
        const newContent = document.getElementById("editItemContent").value.trim();
        if (!newTitle) {
          alert("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ");
          return;
        }
        try {
          const res = await fetch(`/items/${itemId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({ title: newTitle, content: newContent, category_id: categoryId }),
          });
          if (!res.ok) {
            alert("L·ªói khi s·ª≠a item");
            return;
          }
          document.getElementById("editItemModal").remove();
          localStorage.setItem("lastCategoryId", categoryId);
          window.location.reload();
        } catch (err) {
          alert("L·ªói m√°y ch·ªß");
        }
      };
    };
  });
}